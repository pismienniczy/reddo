;=== funkcja do przekształcania ciągu tekstowego w tablicę ====
StrToArr(str, delim:="`n")
{
arr := []
Loop, parse, str, %delim%
	{
	line := Trim(A_LoopField, "`n`r`t ")
	arr.Push(line)
	}
return arr
}

;=== funkcja sprawdza ścieżkę docelową i tworzy ją w razie potrzeby ===
GetDestFolder(destination)
{
if !FileExist(destination)
	{
	MsgBox,,, Nie znaleziono folderu %destination%`n`nTworzę folder..., 1
	FileCreateDir %destination%
		if ErrorLevel
			{
			MsgBox !!! Błąd nr %A_LastError% !!!`nNie udało się utworzyć folderu`n`n%destination%`n`nSprawdź poprawność ścieżki lub uprawnienia do utworzenia folderu.
			return False
			}
		else
	MsgBox,,, Utworzono folder %destination%`n`nPrzechodzę dalej..., 1
	}
else
	MsgBox,,, Folder docelowy %destination% jest prawidłowy.`n`nPrzechodzę dalej..., 1
}

;===== funkcja do kopiowania wszystkiego =====
CopyAllTMs(fromarr, into)
{
copied :=
count_copied = 0
nieudane := 
count_nieudane = 0
nonexisting :=
count_nonexisting = 0

For e in fromarr
	{

	if FileExist(fromarr[e])
		{
			from := fromarr[e] ; ponieważ FileCopy nie obsługuje elementów tablic
;			MsgBox, , , % "Znaleziono "fromarr[e]". Kopiowanie...", 0.5
			FileCopy %from%, %into%
			if ErrorLevel   ; i.e. it's not blank or zero.
				{
				count_nieudane += 1
				if A_LastError = 80
					error = %A_LastError%: plik docelowy już istnieje
				else if A_LastError = 5
					error = %A_LastError%: brak dostępu
				else
					error = numer %A_LastError%
				MsgBox, , , % "!!! Błąd " error " !!!`nNie skopiowano pliku "fromarr[e], 0.5
				}
			else
				{
				count_copied += 1
;				MsgBox, , , % "Skopiowano plik "fromarr[e]"`ndo folderu`n "into, 0.5
				}
		}
	else
		{
		count_nonexisting += 1
		MsgBox,,, Nie znaleziono pliku o nazwie %from%, 0.5
		}
	}
	
	failcount := (count_nieudane + count_nonexisting)
	if failcount = 0
		MsgBox Skopiowano wszystkie pliki (czyli %count_copied%).
	else
		MsgBox Sukces : porażka - %count_copied%:%failcount%`n`nSkopiowano następujące pliki:`n%copied% (łącznie %count_copied%)`n`nPlików nieodnalezionych:`n%nonexisting% (łącznie %count_nonexisting%)`n`nNie udało się skopiować plików:`n%nieudane% (łącznie %count_nieudane%).
}


;========== funkcja sprawdzająca, czy elementy tablicy spełniają kryteria RegEx ===========
CheckInputList(input)
{
properlist := [] ;tablica elementów zgodnych z definicją, zwracana na koniec
inputcount = 0
	For e in input
		{
	inputcount += 1
	if RegExMatch(input[e], "(O-20[0-9]{2}-[0-9]{5})")
		properlist.Push(input[e])
		}
if properlist.Length() = 0
	{
	MsgBox Żaden z podanych numerów nie jest prawidłowy`n(prawidłowy format to: O-2018-11111)
		return False
	}	
else
	{
	l := properlist.Length()
	if l = 1
		MsgBox,,, % "Podano " properlist.Length() " prawidłowy numer projektu.`n`nTrwa wyszukiwanie plików...", 1
	else if l < 5
		MsgBox,,, % "Podano " properlist.Length() " prawidłowe numery projektów.`n`nTrwa wyszukiwanie plików...", 1
	
	else if l > 4
		MsgBox,,, % "Podano " properlist.Length() " prawidłowych numerów projektów.`n`nTrwa wyszukiwanie plików...", 1
	return properlist
	}
}

;=========== funkcja do znajdowania plików o konkretnym rozszerzeniu w dół ścieżki, która zwraca listę pełnych ścieżek tych plików ========
DajMiDir(initdir, numeryplu, ext) ;initdir = ścieżka, poniżej której szukamy; ext = rozszerzenie plików
{
	falselist := 
	dirlist := [] ;tablica do przechowywania pełnych ścieżek przed zwróceniem ich przez funkcję
		For t in numeryplu
		{
		Loop Files, %initdir%\*.%ext%, R  ; Recurse into subfolders.
			{
			filedirname = %A_LoopFileLongPath%
			if InStr(filedirname, numeryplu[t],,, 2)
				dirlist.Push(filedirname)
			else
				falselist .= numeryplu[t]"`n"
			}
		}
	dobre := dirlist.Length()
	if dirlist.Length() = 0
		{
;		MsgBox W ścieżce %initdir% nie znaleziono następujących plików z rozszerzeniem .%ext% w folderach o takim samym numerze:`n`n%falselist%
		return False
		}
	else
		{
;		MsgBox Liczba plików spełniających kryteria: %dobre%
		return dirlist
		}
}

;=========== funkcja do tworzenia listy z treści tablicy (zwykle do MsgBox i innych form sprawdzenia) ======
ArrToStr(array, delim:="`n")
{
	listarr := ;zmienna tekstowa odpowiadająca treści tablicy w ramach tej funkcji (tylko do wyświetlania w MsgBox)
	For i in array
		listarr .= array[i]delim
	
	if array.Length() = 0
		MsgBox % "Wygląda, że ta tablica jest pusta:("
	else
		MsgBox % "Z zadanej listy pasuje tyle elementów: " array.Length()"`n`nA są to następujące elementy:`n`n"RTrim(listarr, delim)
}
